{"ast":null,"code":"import _slicedToArray from \"/home/vini/Documents/Code/Meus projetos/9. website-avengers/the-avengers/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/home/vini/Documents/Code/Meus projetos/9. website-avengers/the-avengers/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/vini/Documents/Code/Meus projetos/9. website-avengers/the-avengers/src/0_components/2_module/MyForm.js\";\nimport React from \"react\";\nimport Autosuggest from \"react-autosuggest\";\nimport axios from \"axios\";\nimport { Radio, FormControlLabel } from \"@material-ui/core\";\nimport { Formik, Form, Field, ErrorMessage, useField } from \"formik\";\nimport * as Yup from \"yup\";\nimport { MyFormStyle } from \"../../2_styles/3_module/MyFormStyle\";\nimport FormError from \"./FormError\";\nconst validationSchema = Yup.object().shape({\n  superName: Yup.string().min(2, \"Must have at least 2 characters\").max(255, \"Must be shorter than 255\").required(\"Please enter your superhero name\"),\n  realName: Yup.string().min(2, \"Must have at least 2 characters\").max(255, \"Must be shorter than 255\").required(\"Please enter your real name\"),\n  superpower: Yup.string().min(2, \"Must have at least 2 characters\").max(255, \"Must be shorter than 255 characters\").required(\"Please enter at least one superpower\"),\n  country: Yup.string().required(\"Please choose a country\"),\n  retiredHuman: Yup.string().required(\"Please choose an option\"),\n  email: Yup.string().email(\"Must be a valid email\").max(255, \"Must be shorter than 255 characters\").required(\"Please enter your email\")\n});\n\nconst MyRadioButton = (_ref) => {\n  let label = _ref.label,\n      props = _objectWithoutProperties(_ref, [\"label\"]);\n\n  const _useField = useField(props),\n        _useField2 = _slicedToArray(_useField, 1),\n        field = _useField2[0];\n\n  return React.createElement(FormControlLabel, Object.assign({}, field, {\n    control: React.createElement(Radio, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }),\n    label: label,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }));\n};\n\nexport default function MyForm() {\n  const _React$useState = React.useState(\"\"),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        country = _React$useState2[0],\n        setCountry = _React$useState2[1];\n\n  const _React$useState3 = React.useState([]),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        suggestions = _React$useState4[0],\n        setSuggestions = _React$useState4[1];\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(MyFormStyle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(Formik, {\n    initialValues: {\n      superName: \"\",\n      realName: \"\",\n      superpower: \"\",\n      country: \"\",\n      retiredHuman: \"\",\n      email: \"\"\n    },\n    validationSchema: validationSchema,\n    onSubmit: (data, {\n      setSubmitting,\n      resetForm\n    }) => {\n      setSubmitting = false;\n      alert(JSON.stringify(data, null, 2));\n      setSubmitting = true;\n      resetForm();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, ({\n    values,\n    isSubmitting,\n    errors,\n    touched,\n    message\n  }) => React.createElement(Form, {\n    id: \"myForm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"input_row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: \"input_title\",\n    htmlFor: \"superName\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"What is your superhero name?\"), React.createElement(Field, {\n    placeholder: \"Spider-Man\",\n    name: \"superName\",\n    type: \"input\",\n    className: touched.superName && errors.superName ? \"input_error\" : null,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \"\\xA0\", React.createElement(ErrorMessage, {\n    name: \"superName\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"input_row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: \"input_title\",\n    htmlFor: \"realName\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"What is your real name?\"), React.createElement(Field, {\n    placeholder: \"Peter Parker\",\n    name: \"realName\",\n    type: \"input\",\n    className: touched.realName && errors.realName ? \"input_error\" : null,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, \"\\xA0\", React.createElement(ErrorMessage, {\n    name: \"realName\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"input_row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: \"input_title\",\n    htmlFor: \"superpower\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, \"What are your superpowers?\"), React.createElement(Field, {\n    placeholder: \"Super strength, spider sense, lick own elbow\",\n    name: \"superpower\",\n    type: \"input\",\n    className: touched.superpower && errors.superpower ? \"input_error\" : null,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, \"\\xA0\", React.createElement(ErrorMessage, {\n    name: \"superpower\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"input_row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: \"input_title\",\n    htmlFor: \"country\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, \"Where do you live?\"), React.createElement(Autosuggest, {\n    inputProps: {\n      placeholder: \"United States\",\n      autoComplete: \"abcd\",\n      name: \"country\",\n      id: \"country\",\n      value: country,\n      onChange: (_event, {\n        newValue\n      }) => {\n        setCountry();\n      },\n      className: touched.country && errors.country ? \"input_error\" : null\n    },\n    suggestions: suggestions,\n    onSuggestionsFetchRequested: async ({\n      value\n    }) => {\n      if (!value) {\n        this.setState({\n          setSuggestions: []\n        });\n        return;\n      }\n\n      try {\n        const response = await axios.get(\"https://restcountries.eu/rest/v2/name/\".concat(value));\n        this.setState({\n          setSuggestions: response.data.map(row => ({\n            name: row.name\n          }))\n        });\n      } catch (e) {\n        this.setState({\n          setSuggestions: []\n        });\n      }\n    },\n    onSuggestionsClearRequested: () => {\n      this.setState({\n        setSuggestions: []\n      });\n    },\n    onSuggestionSelected: (event, {\n      suggestion,\n      method\n    }) => {\n      if (method == \"enter\") {\n        event.preventDefault();\n      }\n\n      this.setState({\n        setCountry: suggestion.name\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"input_row retiredHuman\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: \"input_title\",\n    htmlFor: \"retiredHuman \",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }, \"Have you ever retired a human being?\"), React.createElement(\"div\", {\n    className: \"radio_group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }, React.createElement(MyRadioButton, {\n    name: \"retiredHuman\",\n    type: \"radio\",\n    value: \"yes\",\n    label: \"Yes, my bad\",\n    className: \"radio_button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  }), React.createElement(MyRadioButton, {\n    name: \"retiredHuman\",\n    type: \"radio\",\n    value: \"no\",\n    label: \"No, and I'll never do it again\",\n    className: \"radio_button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221\n    },\n    __self: this\n  }, \"\\xA0\", React.createElement(ErrorMessage, {\n    name: \"retiredHuman\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"input_row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: \"input_title\",\n    htmlFor: \"retiredHuman \",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229\n    },\n    __self: this\n  }, \"What's your email?\"), React.createElement(Field, {\n    placeholder: \"iamnotspidey@example.com\",\n    name: \"email\",\n    type: \"email\",\n    className: touched.email && errors.email ? \"input_error\" : null,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241\n    },\n    __self: this\n  }, \"\\xA0\", React.createElement(ErrorMessage, {\n    name: \"email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"btn_submit-box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    id: \"btn_submit\",\n    type: \"submit\",\n    disabled: isSubmitting,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249\n    },\n    __self: this\n  }, \"Submit\"))))));\n}","map":{"version":3,"sources":["/home/vini/Documents/Code/Meus projetos/9. website-avengers/the-avengers/src/0_components/2_module/MyForm.js"],"names":["React","Autosuggest","axios","Radio","FormControlLabel","Formik","Form","Field","ErrorMessage","useField","Yup","MyFormStyle","FormError","validationSchema","object","shape","superName","string","min","max","required","realName","superpower","country","retiredHuman","email","MyRadioButton","label","props","field","MyForm","useState","setCountry","suggestions","setSuggestions","data","setSubmitting","resetForm","alert","JSON","stringify","values","isSubmitting","errors","touched","message","placeholder","autoComplete","name","id","value","onChange","_event","newValue","className","setState","response","get","map","row","e","event","suggestion","method","preventDefault"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport Autosuggest from \"react-autosuggest\";\nimport axios from \"axios\";\n\nimport { Radio, FormControlLabel } from \"@material-ui/core\";\n\nimport { Formik, Form, Field, ErrorMessage, useField } from \"formik\";\nimport * as Yup from \"yup\";\n\nimport { MyFormStyle } from \"../../2_styles/3_module/MyFormStyle\";\n\nimport FormError from \"./FormError\";\n\nconst validationSchema = Yup.object().shape({\n  superName: Yup.string()\n    .min(2, \"Must have at least 2 characters\")\n    .max(255, \"Must be shorter than 255\")\n    .required(\"Please enter your superhero name\"),\n  realName: Yup.string()\n    .min(2, \"Must have at least 2 characters\")\n    .max(255, \"Must be shorter than 255\")\n    .required(\"Please enter your real name\"),\n  superpower: Yup.string()\n    .min(2, \"Must have at least 2 characters\")\n    .max(255, \"Must be shorter than 255 characters\")\n    .required(\"Please enter at least one superpower\"),\n  country: Yup.string().required(\"Please choose a country\"),\n  retiredHuman: Yup.string().required(\"Please choose an option\"),\n  email: Yup.string()\n    .email(\"Must be a valid email\")\n    .max(255, \"Must be shorter than 255 characters\")\n    .required(\"Please enter your email\")\n});\n\nconst MyRadioButton = ({ label, ...props }) => {\n  const [field] = useField(props);\n  return <FormControlLabel {...field} control={<Radio />} label={label} />;\n};\n\nexport default function MyForm() {\n  const [country, setCountry] = React.useState(\"\");\n  const [suggestions, setSuggestions] = React.useState([]);\n\n  return (\n    <div>\n      <MyFormStyle>\n        <Formik\n          initialValues={{\n            superName: \"\",\n            realName: \"\",\n            superpower: \"\",\n            country: \"\",\n            retiredHuman: \"\",\n            email: \"\"\n          }}\n          validationSchema={validationSchema}\n          onSubmit={(data, { setSubmitting, resetForm }) => {\n            setSubmitting = false;\n            alert(JSON.stringify(data, null, 2));\n\n            setSubmitting = true;\n            resetForm();\n          }}\n        >\n          {({ values, isSubmitting, errors, touched, message }) => (\n            <Form id=\"myForm\">\n              {/* SUPERHERO NAME */}\n              <div className=\"input_row\">\n                <label className=\"input_title\" htmlFor=\"superName\">\n                  What is your superhero name?\n                </label>\n                <Field\n                  placeholder=\"Spider-Man\"\n                  name=\"superName\"\n                  type=\"input\"\n                  className={\n                    touched.superName && errors.superName ? \"input_error\" : null\n                  }\n                />\n\n                <div className=\"error\">\n                  &nbsp;\n                  <ErrorMessage name=\"superName\" />\n                </div>\n              </div>\n\n              {/* REALNAME */}\n              <div className=\"input_row\">\n                <label className=\"input_title\" htmlFor=\"realName\">\n                  What is your real name?\n                </label>\n                <Field\n                  placeholder=\"Peter Parker\"\n                  name=\"realName\"\n                  type=\"input\"\n                  className={\n                    touched.realName && errors.realName ? \"input_error\" : null\n                  }\n                />\n\n                <div className=\"error\">\n                  &nbsp;\n                  <ErrorMessage name=\"realName\" />\n                </div>\n              </div>\n\n              {/* SUPERPOWER */}\n              <div className=\"input_row\">\n                <label className=\"input_title\" htmlFor=\"superpower\">\n                  What are your superpowers?\n                </label>\n                <Field\n                  placeholder=\"Super strength, spider sense, lick own elbow\"\n                  name=\"superpower\"\n                  type=\"input\"\n                  className={\n                    touched.superpower && errors.superpower\n                      ? \"input_error\"\n                      : null\n                  }\n                />\n\n                <div className=\"error\">\n                  &nbsp;\n                  <ErrorMessage name=\"superpower\" />\n                </div>\n              </div>\n\n              {/* COUNTRY */}\n              <div className=\"input_row\">\n                {/* <label className=\"input_title\" htmlFor=\"country\">\n                    Where do you live?\n                  </label>\n                  <Field\n                    placeholder=\"United States\"\n                    name=\"country\"\n                    type=\"input\"\n                    className={\n                      touched.country && errors.country ? \"input_error\" : null\n                    }\n                  />\n\n                  <div className=\"error\">\n                    &nbsp;\n                    <ErrorMessage name=\"country\" />\n                  </div> */}\n\n                <label className=\"input_title\" htmlFor=\"country\">\n                  Where do you live?\n                </label>\n                <Autosuggest\n                  inputProps={{\n                    placeholder: \"United States\",\n                    autoComplete: \"abcd\",\n                    name: \"country\",\n                    id: \"country\",\n                    value: country,\n                    onChange: (_event, { newValue }) => {\n                      setCountry();\n                    },\n                    className:\n                      touched.country && errors.country ? \"input_error\" : null\n                  }}\n                  suggestions={suggestions}\n                  onSuggestionsFetchRequested={async ({ value }) => {\n                    if (!value) {\n                      this.setState({ setSuggestions: [] });\n                      return;\n                    }\n\n                    try {\n                      const response = await axios.get(\n                        `https://restcountries.eu/rest/v2/name/${value}`\n                      );\n                      this.setState({\n                        setSuggestions: response.data.map(row => ({\n                          name: row.name\n                        }))\n                      });\n                    } catch (e) {\n                      this.setState({ setSuggestions: [] });\n                    }\n                  }}\n                  onSuggestionsClearRequested={() => {\n                    this.setState({ setSuggestions: [] });\n                  }}\n                  onSuggestionSelected={(event, { suggestion, method }) => {\n                    if (method == \"enter\") {\n                      event.preventDefault();\n                    }\n                    this.setState({ setCountry: suggestion.name });\n                  }}\n                />\n              </div>\n\n              {/* RETIRED HUMAN */}\n              <div className=\"input_row retiredHuman\">\n                <label className=\"input_title\" htmlFor=\"retiredHuman \">\n                  Have you ever retired a human being?\n                </label>\n\n                <div className=\"radio_group\">\n                  <MyRadioButton\n                    name=\"retiredHuman\"\n                    type=\"radio\"\n                    value=\"yes\"\n                    label=\"Yes, my bad\"\n                    className=\"radio_button\"\n                  />\n\n                  <MyRadioButton\n                    name=\"retiredHuman\"\n                    type=\"radio\"\n                    value=\"no\"\n                    label=\"No, and I'll never do it again\"\n                    className=\"radio_button\"\n                  />\n                </div>\n\n                <div className=\"error\">\n                  &nbsp;\n                  <ErrorMessage name=\"retiredHuman\" />\n                </div>\n              </div>\n\n              {/* EMAIL */}\n              <div className=\"input_row\">\n                <label className=\"input_title\" htmlFor=\"retiredHuman \">\n                  What's your email?\n                </label>\n                <Field\n                  placeholder=\"iamnotspidey@example.com\"\n                  name=\"email\"\n                  type=\"email\"\n                  className={\n                    touched.email && errors.email ? \"input_error\" : null\n                  }\n                />\n\n                <div className=\"error\">\n                  &nbsp;\n                  <ErrorMessage name=\"email\" />\n                </div>\n              </div>\n\n              {/* SUBMIT BUTTON */}\n              <div className=\"btn_submit-box\">\n                <button id=\"btn_submit\" type=\"submit\" disabled={isSubmitting}>\n                  Submit\n                </button>\n              </div>\n            </Form>\n          )}\n        </Formik>\n        {/* <Formik\n            initialValues={{\n              superName: \"\",\n              realName: \"\",\n              superpower: \"\",\n              country: \"\",\n              retiredHuman: \"\",\n              email: \"\"\n            }}\n            validationSchema={validationSchema}\n            onSubmit={(values, { setSubmitting, resetForm }) => {\n              setSubmitting(true);\n              setTimeout(() => {\n                alert(JSON.stringify(values, null, 2));\n                resetForm();\n                setSubmitting(false);\n              }, 500);\n            }}\n          >\n            {({\n              values,\n              errors,\n              touched,\n              handleChange,\n              handleBlur,\n              handleSubmit,\n              isSubmitting\n            }) => (\n              <form id=\"myForm\" onSubmit={handleSubmit}>\n                <div className=\"input_row\">\n                  <label htmlFor=\"superName\">\n                    What is your superhero name?\n                  </label>\n                  <input\n                    type=\"text\"\n                    name=\"superName\"\n                    id=\"superName\"\n                    placeholder=\"Spider-Man\"\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.superName}\n                    className={\n                      touched.superName && errors.superName\n                        ? \"input_error\"\n                        : null\n                    }\n                  />\n\n                  <FormError\n                    touched={touched.superName}\n                    message={errors.superName}\n                  />\n                </div>\n\n                <div className=\"input_row\">\n                  <label htmlFor=\"realName\">What is your real name?</label>\n                  <input\n                    type=\"text\"\n                    name=\"realName\"\n                    id=\"realName\"\n                    placeholder=\"Peter Parker\"\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.realName}\n                    className={\n                      touched.realName && errors.realName ? \"input_error\" : null\n                    }\n                  />\n\n                  <FormError\n                    touched={touched.realName}\n                    message={errors.realName}\n                  />\n                </div>\n\n                <div className=\"input_row\">\n                  <label htmlFor=\"superpower\">What are your superpowers?</label>\n                  <input\n                    type=\"text\"\n                    name=\"superpower\"\n                    id=\"superpower\"\n                    placeholder=\"Strenght, shoots web, lick own elbow\"\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.superpower}\n                    className={\n                      touched.superpower && errors.superpower\n                        ? \"input_error\"\n                        : null\n                    }\n                  />\n                  <FormError\n                    touched={touched.superpower}\n                    message={errors.superpower}\n                  />\n                </div>\n\n                <div className=\"input_row\">\n                  <label htmlFor=\"country\">What country do you live in?</label>\n                  <input\n                    type=\"text\"\n                    name=\"country\"\n                    id=\"country\"\n                    placeholder=\"United States\"\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.country}\n                    className={\n                      touched.country && errors.country ? \"input_error\" : null\n                    }\n                  />\n                  <FormError\n                    touched={touched.country}\n                    message={errors.country}\n                  />\n                </div>\n\n                <div className=\"input_row input_row-retiredHuman \">\n                  <label htmlFor=\"retiredHuman\">\n                    Have you ever retired a human by mistake?\n                  </label>\n                  <input\n                    type=\"radio\"\n                    name=\"retiredHumanYes\"\n                    id=\"retiredHuman\"\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.retiredHuman}\n                    className={\n                      touched.retiredHuman && errors.retiredHuman\n                        ? \"input_error\"\n                        : null\n                    }\n                  />\n                  <div className=\"span_box\">\n                    <span>Yes, my bad</span>\n                  </div>\n\n                  <div className=\"input_row input_row-retiredHuman\">\n                    <input\n                      type=\"radio\"\n                      name=\"retiredHumanNo\"\n                      id=\"retiredHuman\"\n                      onChange={handleChange}\n                      onBlur={handleBlur}\n                      value={values.retiredHuman}\n                      className={\n                        touched.retiredHuman && errors.retiredHuman\n                          ? \"input_error\"\n                          : null\n                      }\n                    />\n                    <div className=\"span_box\">\n                      <span>No, and I'll never to it again</span>\n                    </div>\n                    <FormError\n                      touched={touched.retiredHuman}\n                      message={errors.retiredHuman}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"input_row\">\n                  <label htmlFor=\"email\">\n                    Tell us your email so we can reach you\n                  </label>\n                  <input\n                    type=\"email\"\n                    name=\"email\"\n                    id=\"email\"\n                    placeholder=\"iamnotspiderman@avengers.com\"\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.email}\n                    className={\n                      touched.email && errors.email ? \"input_error\" : null\n                    }\n                  />\n                  <FormError touched={touched.email} message={errors.email} />\n                </div>\n\n                <div className=\"btn_submit-box\">\n                  <button id=\"btn_submit\" type=\"submit\" disabled={isSubmitting}>\n                    Submit\n                  </button>\n                </div>\n              </form>\n            )}\n          </Formik> */}\n      </MyFormStyle>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}